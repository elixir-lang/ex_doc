# Cheatsheet User Guide

## I'm a H2 section
{: .col-2}

### For columns use H2 sections

| `.col-1` | "one-column"|
| `.col-2` | "two-column"|
| `.col-3` | "three-column"|
| `-col-2-left` | "two-columns" (1/3 - 2/3) |

Set the number of columns under the H2 Sections. 

### I'm a H3 section

Use H3 to start a new topic.

#### I'm a H4 section.

### Tables

| `.col-1` | "one-column"|
| `.col-2` | "two-column"|
| `.col-3` | "three-column"|
| `-col-2-left` | "two-columns" (1/3 - 2/3) |
| `.col-4` | "four-columns for lists"|
| `.col-6` | "six-columns for lists"|
| `.wrap` | "wrap a content"|
| `.prime` | "highlight a content" |

I'm a `.prime`. How cool is that? ;)
{: .prime}

### Code

```elixir
# hello.exs
defmodule Greeter do
  def greet(name) do
    message = "Hello, " <> name <> "!"
    IO.puts message
  end
end

Greeter.greet("world")
```

### Paragraphs

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed at ante consectetur, pharetra magna a, malesuada lectus. Mauris porttitor ligula dui, at egestas augue hendrerit eget. Morbi lorem urna, scelerisque ut sem et, sollicitudin porta nulla.

### Lists

- Element 1
- Element 2
- `piece of code`

### Adding variants

```
## Section
{: .col-2}

"highlight the content in a paragraph"
{: .prime}

"wrap a very long text"
{: .wrap}
```

Ex_docs uses Kramdown, and supports adding classes via Kramdown's syntax.

H3 sections
-----------
{: .col-1}

### Supported

Each section can have the following children:

#### H4 section

- `h4`
- `lists`
- `tables`

A paragraph with a cool text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed at ante consectetur, pharetra magna a, malesuada lectus. Mauris porttitor ligula dui, at egestas augue hendrerit eget.

- `p`

```elixir
Enum.map(users, fn user ->
  IO.puts "Hello " <> user
end)
```
- `code`

A highlight section!
This is a section with `{: .prime}`. Notice the fancy highlight! Great for "getting started" kind of snippets.
{: .prime}

### H3 section

Every box is an H3 section. The box will encompass everything inside the body of the H3.

This is a basic section with paragraphs in it.

Code
----
{: .col-3}

### Basic code

```elixir
user = %{name: "Tom", age: 23}
%{name: username} = user
```

```elixir
def greet(%{name: username}) do
  IO.puts "Hello, " <> username
end

user = %{name: "Tom", age: 23}
```

Code blocks can be placed one after the other.

### Code with headings

#### index.ex

```
Path.join(["~", "foo"])
"~/foo"
```

#### other.ex

```
Path.join(["foo"])
"foo"
```

Code blocks can have headings.

### Long lines

```
defmodule MyTracer do
  def trace({:remote_function, _meta, module, name, arity}, env) do
    IO.puts "#{env.file}:#{env.line} #{inspect(module)}.#{name}/#{arity}"
    :ok
  end

  def trace(_event, _env) do
    :ok
  end
end
```

Long lines will have scrollbars on hover.

### Line wrapping

```
defmodule MyTracer do
  def trace({:remote_function, _meta, module, name, arity}, env) do
    IO.puts "#{env.file}:#{env.line} #{inspect(module)}.#{name}/#{arity}"
    :ok
  end

  def trace(_event, _env) do
    :ok
  end
end
```
{: .wrap}

Add `wrap` to wrap long lines.

## Lists
{: .-three-column}

### Lists

- This is
- a list
- with a few items

Here's an extra paragraph after the list.

### Lists with headings

#### Part 1

- `createElement()`
- `componentDidMount()`
- `componentWillUnmount()`

#### Part 2

- `shouldComponentUpdate()`
- `componentWillReceiveProps()`


Here's an extra paragraph after the list.

## List columns
{: .-one-column}

### Six columns

- One
- Two
- Three
- Four
- Five
- Six
- Seven
- Eight
- Nine
- Ten
- Eleven
{: .-six-column}

Add `{: .-six-column}` to make large lists.

### Four columns

- One
- Two
- Three
- Four
- Five
- Six
- Seven
- Eight
- Nine
- Ten
- Eleven
{: .-four-column}

Add `{: .-four-column}` to make large lists.

### Also see

- One
- Two
- Three
- Four
- Five
- Six
- Seven
- Eight
- Nine
- Ten
{: .-also-see}

Add `{: .-also-see}`.

## Paragraphs
{: .-three-column}

### Basic paragraphs

This is a basic section with paragraphs in it. When paragraphs are the first elements in an H3 section's body, they appear as white.

### Basic paragraphs

```
···
```

When paragraphs appear after `pre`/`table`/`ul`, they appear with a gray background.

### Preludes

Here's a prelude paragraph. Add `{: .-setup}` to make paragraphs appear with a gray background.
{: .-setup}

```
···
```

### Crosslink

Add `{: .-crosslink}` to make big loud external links:

```
···
```

[Home](/)
{: .-crosslink}

## Tables
{: .-three-column}

### Basic table

#### Date

| Example         | Output                 |
| ---             | ---                    |
| `%m/%d/%Y`      | `06/05/2013`           |
| `%A, %B %e, %Y` | `Sunday, June 5, 2013` |
| `%b %e %a`      | `Jun 5 Sun`            |

#### Time

| Example         | Output                 |
| ---             | ---                    |
| `%H:%M`         | `23:05`                |
| `%I:%M %p`      | `11:05 PM`             |

This is a basic table with h4's.

### Shortcuts

| `V` | Vector |
| `P` | Pencil |
| `T` | Text |
| `L` | Line |
| `R` | Rectangle |
| `O` | Oval |
| `U` | Rounded |
{: .-shortcuts}

Add `{: .-shortcuts}` to tables.

### With headers

| Prefix | Example               | What     |
| ---    | ---                   | ---      |
| `//`   | `//hr[@class='edge']` | Anywhere |
| `./`   | `./a`                 | Relative |
| `/`    | `/html/body/div`      | Root     |
{: .-headers}

Add `{: .-headers}` to add headers.

## Two columns

### One

```
···
```

### Two

```
···
```

## Left reference
{: .-left-reference}

### One

```
···
···
···
···
···
···
···
···
```

### Two

```
···
```

### Three

```
···
```

## One column
{: .-one-column}

### One

```
···
```
